import{_ as s,o as a,c as l,R as n}from"./chunks/framework.bf742a9e.js";const d=JSON.parse('{"title":"vue2 组件测试","description":"","frontmatter":{},"headers":[],"relativePath":"vue2/vue2组件测试.md","filePath":"vue2/vue2组件测试.md"}'),p={name:"vue2/vue2组件测试.md"},e=n(`<h1 id="vue2-组件测试" tabindex="-1">vue2 组件测试 <a class="header-anchor" href="#vue2-组件测试" aria-label="Permalink to &quot;vue2 组件测试&quot;">​</a></h1><h2 id="前端测试" tabindex="-1">前端测试 <a class="header-anchor" href="#前端测试" aria-label="Permalink to &quot;前端测试&quot;">​</a></h2><p>软件测试：检查软件是否按照预期工作的过程。</p><p>测试分类：</p><p>从是否需要手动测试来分：</p><ul><li>手动测试：需要人工操作，比如点击按钮，输入文字等。</li><li>自动测试：写代码测试其他代码，不需要人亲自手动测试每一个功能。</li></ul><p>前端测试，从测试的范围来分：</p><ol><li>端到端测试</li></ol><p>测试整个应用，从用户角度出发，<strong>浏览器自动</strong>测试整个应用是否按照预期工作。是自动执行的手动测试，加快手动测试的速度。</p><ul><li>优点：测试全面，测试结果可靠。</li><li>缺点：① 测试速度慢 ② 调试困难 ③ 可能成为 flakey 测试 ④ 编写测试代码的成本高。</li></ul><blockquote><p>flakey 测试：即使程序没有问题，测试也会失败。</p></blockquote><ol start="2"><li>单元测试</li></ol><p>对应用的小部分进行的测试。比如测试一个函数，一个组件等。</p><ul><li>优点：① 测试速度快 ② 调试方便 ③ 编写测试代码的成本低 ④ 提供文档功能，可通过测试用例了解代码的行为 ⑤ 稳定，有助于重构。</li><li>缺点：测试范围小，测试结果不可靠。</li></ul><blockquote><p>重构：不改变代码的功能，但是改变代码的结构，目的是为了提高代码质量。</p></blockquote><ol start="3"><li>快照测试</li></ol><p>快照测试会给运行中的应用程序拍一张图片，并将其与以前保存的图片进行比较。如果图像不同，则测试失败。这种测试方法对确保应用程序代码变更后是否仍然可以正确渲染很有帮助。</p><p>各种测试在前端测试中的占比</p><p><img src="https://jsd.cdn.zzko.cn/gh/jackchoumine/jack-picture@master/front-end-test.png" alt=""></p><blockquote><p>为何没有集成测试？</p></blockquote><p>前端的集成测试，难以定义、编写和调试，通常认为端到端测试就是集成测试。</p><blockquote><p>什么时候不需要自动化测试？</p></blockquote><p>自动化测试的目的是为了节省时间和精力，<strong>长期开发</strong>的<strong>规模较大</strong>的项目自动化测试才会带来巨大的收益。如果项目只是一个小项目，或者是一个短期项目，那么自动化测试可能会带来负担，即编写测试代码会比直接编写应用代码更花时间。</p><p>实际上，在我的工作中，前端进行自动化测试的团队都很少，大部分都是手动测试。</p><blockquote><p>不必追求 100% 的测试覆盖率</p></blockquote><p>除非一个 bug 导致了严重的后果，比如损失几百万元，否则不必追求 100% 的测试覆盖率。因为测试代码也是需要维护的，测试代码的维护成本也是需要考虑的。</p><h3 id="组件测试" tabindex="-1">组件测试 <a class="header-anchor" href="#组件测试" aria-label="Permalink to &quot;组件测试&quot;">​</a></h3><p>组件有很多属性，决定测试哪些属性很重要，能帮助编写高效的测试代码。</p><blockquote><p>如何决定测试哪些属性？</p></blockquote><p><strong>组件的输入和输出</strong>（有人叫组件契约或者组件接口）可帮助决定测试哪些属性。</p><p>从开发人员使用组件但又不了解组件具体实现的角度来编写测试，好的组件单元测试应该始终可触发一个输入，并断言一个输出。</p><p>常见的组件输入：</p><ol><li>用户操作，比如点击按钮，输入文字等；</li><li>props；</li><li>组件事件；</li><li>vuex store 中的数据。</li></ol><p>常见的输出：</p><ol><li>触发的事件；</li><li>外部调用函数；</li><li>渲染结果。</li></ol><h2 id="vue-组件测试" tabindex="-1">vue 组件测试 <a class="header-anchor" href="#vue-组件测试" aria-label="Permalink to &quot;vue 组件测试&quot;">​</a></h2><h3 id="第一个测试" tabindex="-1">第一个测试 <a class="header-anchor" href="#第一个测试" aria-label="Permalink to &quot;第一个测试&quot;">​</a></h3><p>已经存在一个使用<code>vue-cli</code>创建的项目，希望添加测试。</p><ol><li>安装 vue 测试插件：</li></ol><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">vue</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">@vue/cli-plugin-unit-jest</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="2"><li>编写 HelloWorld.vue 组件：</li></ol><p>安装完毕会自动配置测试环境，并创建了一个测试<code>HelloWorld.vue</code>的用例，但是项目里没有 HelloWorld.vue，在<code>tests/unit</code>就近新建一个。</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">HelloWorld</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">props</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">msg</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> String</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">default</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">{{ msg }}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>然后引入组件：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> HelloWorld </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./HelloWorld.vue</span><span style="color:#89DDFF;">&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="3"><li>运行测试</li></ol><p>执行<code>npm run test:unit</code>，测试环境是否配置成功。</p><blockquote><p>可用性（sanity）测试</p></blockquote><p>搭建测试系统的第一步是编写一个简单的测试来检查系统是否配置正确。这被称为<strong>可用性（sanity）测试</strong>。</p><p>在排查复杂问题或者配置环境时，可用性测试应该成为第一个测试用例，因为它能检查环境是否配置正确。</p><blockquote><p>就近放置测试文件</p></blockquote><p>将单元测试放置在尽可能接近被测代码的位置，会更容易被其他开发人员找到。</p>`,52),o=[e];function t(r,c,i,u,D,y){return a(),l("div",null,o)}const b=s(p,[["render",t]]);export{d as __pageData,b as default};
