import{_ as e,o as a,c as t,a as l}from"./app.e07435e5.js";const b=JSON.parse('{"title":"前端应用测试简介","description":"","frontmatter":{},"headers":[{"level":2,"title":"前端应用常用自动化测试有哪些？","slug":"前端应用常用自动化测试有哪些","link":"#前端应用常用自动化测试有哪些","children":[{"level":3,"title":"单元测试","slug":"单元测试","link":"#单元测试","children":[]},{"level":3,"title":"快照测试","slug":"快照测试","link":"#快照测试","children":[]},{"level":3,"title":"端到端测试","slug":"端到端测试","link":"#端到端测试","children":[]},{"level":3,"title":"前端没有集成测试？","slug":"前端没有集成测试","link":"#前端没有集成测试","children":[]},{"level":3,"title":"如何平衡各种测试的比重","slug":"如何平衡各种测试的比重","link":"#如何平衡各种测试的比重","children":[]},{"level":3,"title":"需要使用测试驱动开发的方式吗？","slug":"需要使用测试驱动开发的方式吗","link":"#需要使用测试驱动开发的方式吗","children":[]},{"level":3,"title":"何时不需要自动化测试？","slug":"何时不需要自动化测试","link":"#何时不需要自动化测试","children":[]},{"level":3,"title":"应该追求 100% 的测试覆盖率吗？","slug":"应该追求-100-的测试覆盖率吗","link":"#应该追求-100-的测试覆盖率吗","children":[]}]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"relativePath":"vue2/front-app-test.md"}'),i={name:"vue2/front-app-test.md"},r=l('<h1 id="前端应用测试简介" tabindex="-1">前端应用测试简介 <a class="header-anchor" href="#前端应用测试简介" aria-hidden="true">#</a></h1><p>测试可保证程序按照预期运行。</p><p>测试按照是否需要人工检查，可分为人工测试和自动化测试。</p><p>自动化测试就是使用另一个程序去检查你的软件是否按照预期执行。</p><p>对前端应用来说，自动化测试有 <code>单元测试（unit test）</code> 、 <code>端到端测试（E2E test）</code> 和 <code>快照测试</code> 。</p><p>当谈到程序测试时，往往是指自动化测试。</p><h2 id="前端应用常用自动化测试有哪些" tabindex="-1">前端应用常用自动化测试有哪些？ <a class="header-anchor" href="#前端应用常用自动化测试有哪些" aria-hidden="true">#</a></h2><h3 id="单元测试" tabindex="-1">单元测试 <a class="header-anchor" href="#单元测试" aria-hidden="true">#</a></h3><p>单元测试对程序里的**部分单元（功能）**进行测试，可以是一个函数，一个组件等。</p><blockquote><p>优点</p></blockquote><ol><li><p>运行快。</p></li><li><p>提供了文档。</p></li></ol><p>理解代码可从单元测试入手。</p><ol start="3"><li>出现 flaky 测试的几率小。</li></ol><blockquote><p>缺点</p></blockquote><ol><li>代码重构困难。</li></ol><blockquote><p>书上说这是缺点，我认为是优点，因为单元测试在重构够可检查你是否破坏了其他功能。但是从工作量看，单元测试使得重构的工作量增加，一些开发人员认为是缺点。</p></blockquote><ol start="2"><li>只检查程序的一部分，单元测试通过，程序集成后，可能不能按照预期运行。</li></ol><h4 id="做单元测试的工具有哪些" tabindex="-1">做单元测试的工具有哪些？ <a class="header-anchor" href="#做单元测试的工具有哪些" aria-hidden="true">#</a></h4><p>测试框架：mocha、jest、vitest 等。</p><p>前端框架测试套件：vue--- vue-test-util 、react --- testing-libaray</p><p>testing-libaray 也支持 vue。</p><h3 id="快照测试" tabindex="-1">快照测试 <a class="header-anchor" href="#快照测试" aria-hidden="true">#</a></h3><p>验证代码修改前后，渲染结果是否不同，快照测试可视为人工的视觉测试。</p><p>传统快照测试是在浏览器中启动应用程序并获取渲染页面的屏幕截图。</p><p>Jest 快照测试可以对 JavaScript 中任何可序列化值进行对比。</p><h4 id="常用的快照测试工具有哪些" tabindex="-1">常用的快照测试工具有哪些？ <a class="header-anchor" href="#常用的快照测试工具有哪些" aria-hidden="true">#</a></h4><p>jest、vitest</p><h3 id="端到端测试" tabindex="-1">端到端测试 <a class="header-anchor" href="#端到端测试" aria-hidden="true">#</a></h3><p><code>E2E test</code> 就是从<strong>用户视角</strong>在浏览器上执行用户和程序交互的过程。</p><p>端到端测试存在一些问题：</p><ol><li><p>运行慢。</p></li><li><p>调试困难。</p></li></ol><p>降低调试难度的方式，在 docker 中运行端到端测试，保证不会因为外部环境导致问题难以复现。</p><ol start="3"><li>可能是 flaky 测试。</li></ol><p>即程序运行正常，测试还是失败，可能是因为运行时间太长或者 API 失效等。</p><p>端到端测试可看作自动执行的手动测试。</p><h4 id="常用的端到端测试工具有哪些" tabindex="-1">常用的端到端测试工具有哪些？ <a class="header-anchor" href="#常用的端到端测试工具有哪些" aria-hidden="true">#</a></h4><p>cypress、playwright</p><h3 id="前端没有集成测试" tabindex="-1">前端没有集成测试？ <a class="header-anchor" href="#前端没有集成测试" aria-hidden="true">#</a></h3><p>不建议前端写集成测试，因为难以界定什么是集成，测试用例难以编写和调试。</p><p>有人认为在浏览器上执行的测试是集成测试，有人认为对具有依赖关系的模块进行测试都是集成测试。</p><h3 id="如何平衡各种测试的比重" tabindex="-1">如何平衡各种测试的比重 <a class="header-anchor" href="#如何平衡各种测试的比重" aria-hidden="true">#</a></h3><p>前端应用测试，不能一股脑的都上以上测试，需要按照重要程度，投入收益比来取舍，以得得到简化工作，但是能保证质量的目的。</p><p>单元测试最重要，占比通过在 <code>60%</code> ，甚至只需要单元测试。</p><p>快照测试占比 <code>30%</code> ，端到端占比 <code>10%</code> 。</p><p>单元测试运行快，可及时给开发者反馈，最重要。</p><p>快照测试较快，但是不需要太多快照测试。</p><h3 id="需要使用测试驱动开发的方式吗" tabindex="-1">需要使用测试驱动开发的方式吗？ <a class="header-anchor" href="#需要使用测试驱动开发的方式吗" aria-hidden="true">#</a></h3><p><code>TDD</code> 要求开发人员在写代码之前，先写测试，知道所有测试用例通过。</p><p>但是实际工作并不按照这样的流程来，还可能不写测试。</p><h3 id="何时不需要自动化测试" tabindex="-1">何时不需要自动化测试？ <a class="header-anchor" href="#何时不需要自动化测试" aria-hidden="true">#</a></h3><p>对需要长期运行，且开发时间充裕的项目而言，充分的自动化测试能带来巨大的收益，能<strong>节省很多时间</strong>。</p><p>但是开发时间紧张，或者编写测试的时间比开发时间长，就不该写自动化测试。</p><blockquote><p>自动化测试会拖慢项目进度。</p></blockquote><h3 id="应该追求-100-的测试覆盖率吗" tabindex="-1">应该追求 100% 的测试覆盖率吗？ <a class="header-anchor" href="#应该追求-100-的测试覆盖率吗" aria-hidden="true">#</a></h3><p>不需要，能保证 70% 已经非常好了。</p><blockquote><p>追求 100% 的测试覆盖率，可能会浪费很多时间。</p></blockquote><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-hidden="true">#</a></h2><p>前端应用常用的测试，按照占比或者重要程度排序：单元测试、快照测试和端到端测试。</p><p>工作中可能不写测试，或者只写单元测试，不必追求 100% 的测试覆盖率。</p>',59),d=[r];function p(h,o,n,c,s,u){return a(),t("div",null,d)}const f=e(i,[["render",p]]);export{b as __pageData,f as default};
