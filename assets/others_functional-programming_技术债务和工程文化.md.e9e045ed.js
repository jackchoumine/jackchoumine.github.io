import{_ as e,o as a,c as i,a as l}from"./app.1c38cda7.js";const f=JSON.parse('{"title":"技术债务和工程文化","description":"","frontmatter":{},"headers":[{"level":2,"title":"没有质量意识","slug":"没有质量意识","link":"#没有质量意识","children":[]},{"level":2,"title":"非专业人士","slug":"非专业人士","link":"#非专业人士","children":[]},{"level":2,"title":"不熟练也满足","slug":"不熟练也满足","link":"#不熟练也满足","children":[]},{"level":2,"title":"交付压力","slug":"交付压力","link":"#交付压力","children":[]},{"level":2,"title":"未完成的项目","slug":"未完成的项目","link":"#未完成的项目","children":[]},{"level":2,"title":"经常尝试新技术","slug":"经常尝试新技术","link":"#经常尝试新技术","children":[]},{"level":2,"title":"缺乏责任感","slug":"缺乏责任感","link":"#缺乏责任感","children":[]},{"level":2,"title":"英雄主义","slug":"英雄主义","link":"#英雄主义","children":[]},{"level":2,"title":"没有技术远见","slug":"没有技术远见","link":"#没有技术远见","children":[]}],"relativePath":"others/functional-programming/技术债务和工程文化.md"}'),r={name:"others/functional-programming/技术债务和工程文化.md"},t=l('<h1 id="技术债务和工程文化" tabindex="-1">技术债务和工程文化 <a class="header-anchor" href="#技术债务和工程文化" aria-hidden="true">#</a></h1><blockquote><p>翻译自 <a href="https://www.amazingcto.com/engineering-cultures-of-technical-debt/" target="_blank" rel="noreferrer">Engineering Cultures of Technical Debt</a></p></blockquote><p>我还没有遇到过没有技术债务的团队。虽然技术债务背后有一很多因素，但工程和产品开发文化也导致了技术债务。</p><p>如果不改变文化，CTO 采取的行动会失败，技术债务也不会消失。</p><p>一些导致技术债务的文化：</p><ul><li>没有质量意识</li><li>非专业人士</li><li>不熟练也满足</li><li>交付压力</li><li>未完成的项目</li><li>经常尝试新技术</li><li>缺乏责任感</li><li>英雄主义</li><li>没有技术远见</li></ul><p>这些文化是如何导致技术债务的呢？</p><h2 id="没有质量意识" tabindex="-1">没有质量意识 <a class="header-anchor" href="#没有质量意识" aria-hidden="true">#</a></h2><p>一些团队编写代码、做技术决策时，很草率。他们不关心工艺，不编写测试，不检查边界条件或者他们的代码是否在不同的浏览器中运行。因此他们创建了大量重复且结构不良的代码。为了改变这种情况，需要向团队灌输工匠精神，让他们再次为自己的工作感到自豪。</p><h2 id="非专业人士" tabindex="-1">非专业人士 <a class="header-anchor" href="#非专业人士" aria-hidden="true">#</a></h2><p>工程师并不认为自己是专业人士，例如律师或会计师。会计师知道成为专业人士意味着什么。为了改变这种情况，工程师需要将自己视为专业人士。作为做正确事情的人，因为这是专业的做事方式。如果他们想被称为工程师，他们就需要扮演工程师的角色。</p><h2 id="不熟练也满足" tabindex="-1">不熟练也满足 <a class="header-anchor" href="#不熟练也满足" aria-hidden="true">#</a></h2><p>不熟练也没关系——有时每个人都可以接受不熟练。虽然不熟练是可以的，但快乐地保持不熟练并且不想成长和学习会导致技术债务。为了改变这种情况，需要创造一种成长文化，让每个人都能提高视角和技能。</p><h2 id="交付压力" tabindex="-1">交付压力 <a class="header-anchor" href="#交付压力" aria-hidden="true">#</a></h2><p>经理和工程师有了交付压力，比如时间紧张，他们就可能会忽略质量。为了改变这种情况，管理者需要做出判断，什么时候施加压力合适，什么时候施加压力，什么时候不需要施加压力。</p><h2 id="未完成的项目" tabindex="-1">未完成的项目 <a class="header-anchor" href="#未完成的项目" aria-hidden="true">#</a></h2><p>未完成的项目会导致技术债务。为了改变这种情况，需要让团队专注于完成项目，而不是开始新项目，让团队做事有始有终。</p><h2 id="经常尝试新技术" tabindex="-1">经常尝试新技术 <a class="header-anchor" href="#经常尝试新技术" aria-hidden="true">#</a></h2><p>工程师渴望新事物。可是这个事物还没有被证明是好的，另一个事物就出现了，他们可能很快有切换到另一个事物。</p><p>为了改变这种情况，需要创造一种欣赏但抵制新事物的文化。新事物真的对现在有帮助，才会被采用。</p><h2 id="缺乏责任感" tabindex="-1">缺乏责任感 <a class="header-anchor" href="#缺乏责任感" aria-hidden="true">#</a></h2><p>缺乏责任感——工程师没有责任感或主人翁意识。没有人负责或感觉有责任。这个功能增加了技术债务？ “我不负责！” 为了改变这种情况，让人们对他们所承诺的事情负责，让他们对自己的工作及其效果负责。这是一个挑战，但可以做到。赋予他们改变事物的权力。当有人问你“我该怎么办？”回答“你会做什么？”。</p><h2 id="英雄主义" tabindex="-1">英雄主义 <a class="header-anchor" href="#英雄主义" aria-hidden="true">#</a></h2><p>英雄主义 -- 企业早期能力出众的个别人往往承担了很多工作，成为企业功臣。但是企业成熟后，英雄主义是一种障碍，它会团队成长。</p><p>企业英雄为了巩固自己的地位，<strong>会故意不分享知识，不培养团队，不让团队成长</strong>。企业英雄会让团队依赖他，而不是团队自己解决问题，这会阻碍团队成长和公司发展。</p><p>只把重要的关键的工作交给个别人完成，极容易导致一下主义，给团队带来很大的风险。为了避免这种情况，需要关注团队的整体能力，让团队成员都能胜任重要的工作，让工作成为团队成果而不是个人成果。</p><p>应该鼓励团队成员交流经验，分享知识，培养开放的团队文化。团队成员应该互相帮助，互相学习，共同成长。</p><h2 id="没有技术远见" tabindex="-1">没有技术远见 <a class="header-anchor" href="#没有技术远见" aria-hidden="true">#</a></h2><p>没有技术远见 -- 在做技术决策时，技术视野狭窄，没有考虑到未来的发展，只考虑了眼前的问题。这样的决策会导致技术债务。</p>',29),n=[t];function h(d,c,s,p,o,_){return a(),i("div",null,n)}const g=e(r,[["render",h]]);export{f as __pageData,g as default};
