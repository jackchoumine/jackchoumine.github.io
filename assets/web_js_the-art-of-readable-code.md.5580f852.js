import{_ as s,o as a,c as e,a as n}from"./app.94aaaae3.js";const b=JSON.parse('{"title":"编写可读性代码的艺术","description":"","frontmatter":{},"headers":[{"level":2,"title":"衡量代码的可读性","slug":"衡量代码的可读性","link":"#衡量代码的可读性","children":[{"level":3,"title":"如何衡量代码的可读性呢？","slug":"如何衡量代码的可读性呢","link":"#如何衡量代码的可读性呢","children":[]},{"level":3,"title":"可读性的标准可以降低吗？","slug":"可读性的标准可以降低吗","link":"#可读性的标准可以降低吗","children":[]},{"level":3,"title":"编写可读性的代码很难吗？","slug":"编写可读性的代码很难吗","link":"#编写可读性的代码很难吗","children":[]}]},{"level":2,"title":"命名的技巧","slug":"命名的技巧","link":"#命名的技巧","children":[{"level":3,"title":"把信息放在名字里","slug":"把信息放在名字里","link":"#把信息放在名字里","children":[]},{"level":3,"title":"不要使用有歧义的名字","slug":"不要使用有歧义的名字","link":"#不要使用有歧义的名字","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"relativePath":"web/js/the-art-of-readable-code.md"}'),l={name:"web/js/the-art-of-readable-code.md"},t=n(`<h1 id="编写可读性代码的艺术" tabindex="-1">编写可读性代码的艺术 <a class="header-anchor" href="#编写可读性代码的艺术" aria-hidden="true">#</a></h1><p>最近阅读了《编写可读代码的艺术》一书，感觉很有收获，现在结合自己的理解再来总结编写可读性代码的技巧。</p><p>学会该书的大部分技巧并付诸实践，不能保证保证你写出完美的代码，但是能保证你写出能读的代码，保证你的<strong>码德</strong>下限。</p><p>可读性 = 可测试性 = 设计良好 = 可维护 = 代码质量 = ...，衡量代码的各种指标，都是正相关的，开发程序的大部分时间是在阅读代码（自己的和他人的），所以保证了可读性，其他指标也不会差。</p><h2 id="衡量代码的可读性" tabindex="-1">衡量代码的可读性 <a class="header-anchor" href="#衡量代码的可读性" aria-hidden="true">#</a></h2><p>大部分程序员，全靠自觉、灵感和经验编写代码，往往很难一步到位写出可读性高的代码。</p><p>我看过一些前端组长、前端架构写的代码，简直惨不忍睹，让人有骂娘的冲动。</p><p>比如这种：</p><p><img src="https://cdn.jsdelivr.net/gh/jackchoumine/jack-picture@master/bad-render-chart.png" alt=""></p><p>还有行宽过大，编辑器都出现滚动条了，也会让人不想读。</p><p>不可读的代码往往都会有这样或那样的问题。</p><blockquote><p>软件的成本由开发成本和维护成本组成，而往往维护成本要远高于开发成本，维护成本主要花在理解代码和修改代码上，可读性高、设计良好的代码可大大降理解和修改代码的成本。</p></blockquote><p>可见代码的可读性至关重要。</p><h3 id="如何衡量代码的可读性呢" tabindex="-1">如何衡量代码的可读性呢？ <a class="header-anchor" href="#如何衡量代码的可读性呢" aria-hidden="true">#</a></h3><blockquote><p>代码可读性和代码被他人理解的时间成正比，即他人<strong>理解</strong>代码的时间越少，可读性越高。</p></blockquote><p>如何定义他人？根据我的经验，高年级本科生或者研究生或者工作 2 年内的程序员，又或者，你的一个普通同事。</p><blockquote><p>同事是和你协作的人，让和你协作的人能快速地理解你的代码，至关重要。</p></blockquote><p>如何定义理解？</p><p>理解是一个非常高的标准。真正理解了，就应该能<strong>改动</strong>它、<strong>找出缺陷</strong>且明白它<strong>与外部代码交互的规则</strong>。</p><h3 id="可读性的标准可以降低吗" tabindex="-1">可读性的标准可以降低吗？ <a class="header-anchor" href="#可读性的标准可以降低吗" aria-hidden="true">#</a></h3><p>当可读性和其他约束条件冲突时，比如性能、代码行数，如何取舍？</p><blockquote><p>大部分情况，<strong>可读性优先</strong>，那些可能会经常被他人阅读、改动的代码，可读性再怎么强调都不为过。</p></blockquote><h3 id="编写可读性的代码很难吗" tabindex="-1">编写可读性的代码很难吗？ <a class="header-anchor" href="#编写可读性的代码很难吗" aria-hidden="true">#</a></h3><p>编写可读性高的代码很难。如果一个程序员放弃了可读性这一目标，那么他一定不会成为更好的程序员。</p><p>编写可读性高的代码，前人已经总结了诸多技巧和经验，学习并实践这些经验，可以让代码的可读性不至于很糟糕。</p><h2 id="命名的技巧" tabindex="-1">命名的技巧 <a class="header-anchor" href="#命名的技巧" aria-hidden="true">#</a></h2><p>好的代码，从好的命名开始。</p><h3 id="把信息放在名字里" tabindex="-1">把信息放在名字里 <a class="header-anchor" href="#把信息放在名字里" aria-hidden="true">#</a></h3><ol><li>选择专业的词汇，然后意思更加<strong>清晰和精确</strong>。比如<code>fetchData</code>比<code>getData</code>好；</li></ol><table><thead><tr><th>单词</th><th>更多的选择</th></tr></thead><tbody><tr><td>send</td><td>deliver、dispatch(派发)、announce(声明)、distribute(分配、广播)、route(按照指定路径投送)</td></tr><tr><td>find</td><td>search、extract(提取)、locate(定位)、recover(还原)</td></tr><tr><td>start</td><td>launch、create(创建)、begin、open</td></tr><tr><td>make</td><td>create、setup(就绪)、build、generate(生成)、compose、add、new</td></tr></tbody></table><ol start="2"><li>避免宽泛的名字，除非有特别的理由</li></ol><p>避免使用 <code>tmp</code> 、 <code>retval</code> 这类宽泛的名字。<strong>好的名字应该描述变量的目的或者它承载的值</strong>， <code>tmp_file</code> 比如 <code>tmp</code> 好。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> euclidean_norm </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">arr</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">retval</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">retval</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sqrt</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">retval</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><blockquote><p>这函数在累加数组中元素的平法，把 <code>retval</code> 改成 <code>sum_squares</code> 更好。</p></blockquote><blockquote><p>sum_squares 包含它的目的，如果累加代码不小心写成 <code>retval += arr[i]</code> ，就非常容易发现缺陷。</p></blockquote><blockquote><p>使用 tmp、it 和 retval 等这些空范的名字时，你需要有足够好的理由。</p></blockquote><ol start="3"><li><p>使用具体的名字，避免抽象的名字</p></li><li><p>把重要的信息附加到名字上</p></li></ol><p>常见的可以附加的信息：</p><p>① 单位</p><table><thead><tr><th>函数参数</th><th>参数带单位</th></tr></thead><tbody><tr><td>start(delay)</td><td>delay -&gt; delay_secs</td></tr><tr><td>createCache(size)</td><td>size -&gt; size_mb</td></tr><tr><td>throttleDownload(limit)</td><td>limit -&gt; max_kbps</td></tr><tr><td>rotate(angle)</td><td>angle -&gt; degrees_cw</td></tr></tbody></table><blockquote><p>angle 角度，单位度。cw(circular_measure)，弧度。</p></blockquote><p>在一个项目遇到一个函数的参数对象属性为 <code>rotate</code> :</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#82AAFF;">someFunction</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">rotate</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> rotate_value</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>它接收一个从后台接口返回的值，采用的单位是度，产品经理一直说不对，但是我们也找不到问题，就把这个问题放了很久。产品经理有一天又去找人确认是否正确，给的答复没问题。</p><p>产品又来找我，说那边反馈数据对的。我才猛然想到采用的单位是不是弧度，于是我把角度转成了弧度，产品就说对了。如果给属性加上单位，那么就一眼看出来了。</p><blockquote><p>我们这个项目还涉及角度的方向，最后几经测试，需要做两件事情：角度转为弧度；三维地图下，旋转方向为逆时针。</p></blockquote><blockquote><p>把单位加入参数。</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#82AAFF;">someFunction</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">route_cw</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> cw_value </span><span style="color:#676E95;font-style:italic;">// 顺时针的弧度 anticlockwise/counterclockwise 逆时针</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><blockquote><p>如果把三维地图下逆时针也加入，参数就长了，选择不加，可通过函数注释的方式告知使用者。</p></blockquote><p>② 格式</p><p>③</p><ol start="5"><li>变量作用域大小决定名字长短</li></ol><p>谨慎使用缩略词、自己造词。</p><ol start="6"><li>使用格式表示含义</li></ol><p>遵循编程语言或者团队的约定，且保持一致。</p><p>比如 js 中，构造函数使用大坨峰(Person)，普通函数使用小驼峰(person)。</p><h3 id="不要使用有歧义的名字" tabindex="-1">不要使用有歧义的名字 <a class="header-anchor" href="#不要使用有歧义的名字" aria-hidden="true">#</a></h3><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-hidden="true">#</a></h2><p><img src="https://pegasuswang.readthedocs.io/zh/latest/code/%E7%BC%96%E5%86%99%E5%8F%AF%E8%AF%BB%E4%BB%A3%E7%A0%81%E7%9A%84%E8%89%BA%E6%9C%AF/" alt=""></p><p><img src="https://pdai.tech/md/about/book/book-read-code-art.html#%E3%80%8A%E7%BC%96%E5%86%99%E5%8F%AF%E8%AF%BB%E4%BB%A3%E7%A0%81%E7%9A%84%E8%89%BA%E6%9C%AF%E3%80%8B" alt=""></p>`,60),p=[t];function o(r,c,i,d,h,y){return a(),e("div",null,p)}const F=s(l,[["render",o]]);export{b as __pageData,F as default};
