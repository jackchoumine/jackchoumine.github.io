import{_ as s,o as n,c as a,a as l}from"./app.aff9c626.js";const F=JSON.parse('{"title":"可维护的 js","description":"","frontmatter":{},"headers":[{"level":2,"title":"编程风格","slug":"编程风格","link":"#编程风格","children":[{"level":3,"title":"一致的缩进","slug":"一致的缩进","link":"#一致的缩进","children":[]},{"level":3,"title":"短小且有意义的命名","slug":"短小且有意义的命名","link":"#短小且有意义的命名","children":[]}]},{"level":2,"title":"代码组织方式","slug":"代码组织方式","link":"#代码组织方式","children":[{"level":3,"title":"null 和 undefined 的使用","slug":"null-和-undefined-的使用","link":"#null-和-undefined-的使用","children":[]},{"level":3,"title":"立即执行的函数需要被一眼看出来","slug":"立即执行的函数需要被一眼看出来","link":"#立即执行的函数需要被一眼看出来","children":[]},{"level":3,"title":"简单的 if else 使用三运算符代替","slug":"简单的-if-else-使用三运算符代替","link":"#简单的-if-else-使用三运算符代替","children":[]},{"level":3,"title":"事件的处理","slug":"事件的处理","link":"#事件的处理","children":[]},{"level":3,"title":"将配置数据从代码中分离","slug":"将配置数据从代码中分离","link":"#将配置数据从代码中分离","children":[]},{"level":3,"title":"尽可能使用 filter、map、some 和 forEach 等数组函数代替循环","slug":"尽可能使用-filter、map、some-和-foreach-等数组函数代替循环","link":"#尽可能使用-filter、map、some-和-foreach-等数组函数代替循环","children":[]},{"level":3,"title":"循环中保持 continue 和 break 少","slug":"循环中保持-continue-和-break-少","link":"#循环中保持-continue-和-break-少","children":[]},{"level":3,"title":"短路优先原则","slug":"短路优先原则","link":"#短路优先原则","children":[]}]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"relativePath":"web/js/maintainable-JavaScript.md"}'),e={name:"web/js/maintainable-JavaScript.md"},p=l(`<h1 id="可维护的-js" tabindex="-1">可维护的 js <a class="header-anchor" href="#可维护的-js" aria-hidden="true">#</a></h1><h2 id="编程风格" tabindex="-1">编程风格 <a class="header-anchor" href="#编程风格" aria-hidden="true">#</a></h2><h3 id="一致的缩进" tabindex="-1">一致的缩进 <a class="header-anchor" href="#一致的缩进" aria-hidden="true">#</a></h3><blockquote><p>不推荐使用 tab (制表符)进行缩进，因为不同的操作系统或者编辑器，对制表符解释不同，可能导致显示不同。</p></blockquote><h3 id="短小且有意义的命名" tabindex="-1">短小且有意义的命名 <a class="header-anchor" href="#短小且有意义的命名" aria-hidden="true">#</a></h3><blockquote><p>命名短小了，就容易丢失意义，具体和长的命名，容易保证有见名知义。当短小和意义无法兼得，有意义优先。</p></blockquote><h2 id="代码组织方式" tabindex="-1">代码组织方式 <a class="header-anchor" href="#代码组织方式" aria-hidden="true">#</a></h2><h3 id="null-和-undefined-的使用" tabindex="-1">null 和 undefined 的使用 <a class="header-anchor" href="#null-和-undefined-的使用" aria-hidden="true">#</a></h3><h3 id="立即执行的函数需要被一眼看出来" tabindex="-1">立即执行的函数需要被一眼看出来 <a class="header-anchor" href="#立即执行的函数需要被一眼看出来" aria-hidden="true">#</a></h3><h3 id="简单的-if-else-使用三运算符代替" tabindex="-1">简单的 if else 使用三运算符代替 <a class="header-anchor" href="#简单的-if-else-使用三运算符代替" aria-hidden="true">#</a></h3><h3 id="事件的处理" tabindex="-1">事件的处理 <a class="header-anchor" href="#事件的处理" aria-hidden="true">#</a></h3><p>编写事件处理程序时，我们应该遵守一下几点:</p><ul><li>以<code>on</code>或者<code>handle</code>作为事件处理函数命名的开头, 如<code>onClickBtn</code>、<code>handleClickBtn</code>；</li><li>隔离业务逻辑：将业务逻辑从事件处理函数中分离处理；</li><li>只有事件处理函数能接触到 event 对象：结合第二条，需要用到和事件对象相关的属性，通过参数传递，业务逻辑不再和 html 耦合，就能独立测试业务逻辑了，复用也方便了。</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// bad</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> inputEl </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#input</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">inputEl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">input</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> a)</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">a</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">text</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toUpperCase</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ... 其他复杂逻辑</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">inputEl</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">text</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// good</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> inputEl </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#input</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">inputEl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">input</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> onInput)</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onInput</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">text</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">toUpperCase</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">inputEl</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">text</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 可单独测试、复用也方便</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">toUpperCase</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">text</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ... 其他复杂逻辑</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">text</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toUpperCase</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="将配置数据从代码中分离" tabindex="-1">将配置数据从代码中分离 <a class="header-anchor" href="#将配置数据从代码中分离" aria-hidden="true">#</a></h3><p>项目中通常有一些配置数据，配置数据和代码混合，修改其一时，容易修改另外一方，导致程序出错，所以把配置数据从代码分离，能避免这种错误，从而提高维护性。</p><p>项目中通过具有这些配置数据：</p><ul><li>全局常量；</li><li>多处用到的重复值；</li><li>库的配置数据;</li><li>服务器相关配置。</li></ul><p>把配置数据抽离后统一放在一个目录或者文件中，方便集中管理：</p><ul><li>js 文件中，方便和 js 直接交互；</li><li>json 文档，通过 http 获取，比如含有敏感信息的配置，等用户登录后再去获取。</li></ul><h3 id="尽可能使用-filter、map、some-和-foreach-等数组函数代替循环" tabindex="-1">尽可能使用 filter、map、some 和 forEach 等数组函数代替循环 <a class="header-anchor" href="#尽可能使用-filter、map、some-和-foreach-等数组函数代替循环" aria-hidden="true">#</a></h3><p>普通循环需要多个变量控制边界，不好处理边界情况。</p><h3 id="循环中保持-continue-和-break-少" tabindex="-1">循环中保持 continue 和 break 少 <a class="header-anchor" href="#循环中保持-continue-和-break-少" aria-hidden="true">#</a></h3><p>多个 continue 或者 break 会让循环出口(循环结束的条件)变成多个，滥用后代码逻辑会逐渐变乱。</p><p>减少 continue 的方法：</p><ol><li>合并；</li><li>使用 if else 代替 continue；</li><li>提取函数。</li></ol><h3 id="短路优先原则" tabindex="-1">短路优先原则 <a class="header-anchor" href="#短路优先原则" aria-hidden="true">#</a></h3><p>代码的执行路径尽可能短，理解路径和跟踪变量的路径也变短了，会更加容易理解和维护。</p><p>遵循这个原则，倡导下面这些做法：</p><table><thead><tr><th>操作</th><th>目的</th></tr></thead><tbody><tr><td>拆分函数</td><td>保持函数短小</td></tr><tr><td>提取复杂条件</td><td>控制逻辑尽可能短</td></tr><tr><td>提前返回</td><td>缩短理解和阅读函数的时间 -- 因为使用函数时，主要关注参数和返回值</td></tr><tr><td>提前处理错误</td><td>快速理解意外情况</td></tr><tr><td>简单条件在前</td><td>简单条件在前，可降低认知负担</td></tr><tr><td>省去 else</td><td>省去 else + 提前返回，可降低认知负担，减少理解分支</td></tr><tr><td>变量在使用之前才声明</td><td>缩短变量的作用域，方便跟踪</td></tr></tbody></table><p>减少循环中的 continue 和 break，也是遵循短路优先原则的体现。</p><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-hidden="true">#</a></h2><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-hidden="true">#</a></h2><p><img src="https://www.cnblogs.com/ziyunfei/archive/2012/11/15/2770948.html" alt="[译]JavaScript中几种愚蠢的写法"></p><p><img src="https://www.zhihu.com/question/334216911" alt="为何部分程序员从不使用 break 或 continue 语句？"></p><p><img src="https://blog.csdn.net/SweetTool/article/details/96740628" alt="如何避免循环中丑陋的break和continue"></p>`,36),t=[p];function o(r,c,i,d,y,h){return n(),a("div",null,t)}const u=s(e,[["render",o]]);export{F as __pageData,u as default};
