import{_ as e,o as t,c as a,a as o}from"./app.8e1a57ef.js";const g=JSON.parse('{"title":"编写可读性代码的艺术","description":"","frontmatter":{},"headers":[{"level":2,"title":"衡量代码的可读性","slug":"衡量代码的可读性","link":"#衡量代码的可读性","children":[]},{"level":2,"title":"命名的技巧","slug":"命名的技巧","link":"#命名的技巧","children":[{"level":3,"title":"把信息放在名字里","slug":"把信息放在名字里","link":"#把信息放在名字里","children":[]},{"level":3,"title":"不要使用有歧义的名字","slug":"不要使用有歧义的名字","link":"#不要使用有歧义的名字","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"relativePath":"web/js/the-art-of-readable-code.md"}'),r={name:"web/js/the-art-of-readable-code.md"},p=o('<h1 id="编写可读性代码的艺术" tabindex="-1">编写可读性代码的艺术 <a class="header-anchor" href="#编写可读性代码的艺术" aria-hidden="true">#</a></h1><p>最近阅读了《编写可读代码的艺术》一书，感觉很有收获，现在结合自己的理解再来总结编写可读性代码的技巧。</p><p>学会该书的大部分技巧并付诸实践，不能保证保证你写出完美的代码，但是能保证你写出能读的代码，保证你的<strong>码德</strong>下限。</p><p>可读性 = 可测试性 = 设计良好 = 可维护 = 代码质量 = ...，衡量代码的各种指标，都是正相关的，开发程序的大部分时间是在阅读代码（自己的和他人的），所以保证了可读性，其他指标也不会差。</p><h2 id="衡量代码的可读性" tabindex="-1">衡量代码的可读性 <a class="header-anchor" href="#衡量代码的可读性" aria-hidden="true">#</a></h2><p>大部分程序员，全靠自觉、灵感和经验编写代码，往往很难一步到位写出可读性高的代码。</p><p>我看过一些前端组长、前端架构写的代码，简直惨不忍睹，让人有骂娘的冲动。</p><p>比如这种：</p><p><img src="https://cdn.jsdelivr.net/gh/jackchoumine/jack-picture@master/bad-render-chart.png" alt=""></p><p>还有行宽过大，编辑器都出现滚动条了，也会让人不想读。</p><p>不可读的代码往往都会有这样或那样的问题。</p><blockquote><p>软件的成本由开发成本和维护成本组成，而往往维护成本要远高于开发成本，维护成本主要花在理解代码和修改代码上，可读性高、设计良好的代码可大大降理解和修改代码的成本。</p></blockquote><p>可见代码的可读性至关重要。</p><p>如何衡量代码的可读性呢？</p><blockquote><p>代码可读性和代码被他人理解的时间成正比，即他人<strong>理解</strong>代码的时间越少，可读性越高。</p></blockquote><p>如何定义他人？根据我的经验，高年级本科生或者研究生或者工作2年内的程序员。</p><p>如何定义理解？修改代码后，没有引入新的 bug，可视为理解了。</p><p>当可读性和其他约束条件，比如性能、代码行数冲突时，如何取舍？</p><blockquote><p>大部分情况，<strong>可读性优先</strong>，那些可能会经常被他人阅读、改动的代码，可读性再怎么强调都不为过。</p></blockquote><h2 id="命名的技巧" tabindex="-1">命名的技巧 <a class="header-anchor" href="#命名的技巧" aria-hidden="true">#</a></h2><p>好的代码，从好的命名开始。</p><h3 id="把信息放在名字里" tabindex="-1">把信息放在名字里 <a class="header-anchor" href="#把信息放在名字里" aria-hidden="true">#</a></h3><ol><li>选择专业的词汇<strong>清晰和精确</strong>。比如<code>fetchData</code>比<code>getData</code>好；</li><li>避免宽泛的名字，除非有特别的理由</li></ol><p>避免使用 <code>tmp</code> 、 <code>retval</code> 这类宽泛的名字。好的名字应该描述变量的目的或者它承载的值， <code>tmp_file</code> 比如 <code>tmp</code> 好。</p><ol start="3"><li><p>使用具体的名字，避免抽象的名字</p></li><li><p>把重要的信息附加到名字上</p></li></ol><p>常见的可以附加的信息：</p><p>① 单位</p><p>② 格式</p><p>③</p><ol start="5"><li>变量作用域大小决定名字长短</li></ol><p>谨慎使用缩略词、自己造词。</p><ol start="6"><li>使用格式表示含义</li></ol><p>遵循编程语言或者团队的约定，且保持一致。</p><p>比如 js 中，构造函数使用大坨峰(Person)，普通函数使用小驼峰(person)。</p><h3 id="不要使用有歧义的名字" tabindex="-1">不要使用有歧义的名字 <a class="header-anchor" href="#不要使用有歧义的名字" aria-hidden="true">#</a></h3><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-hidden="true">#</a></h2><p><img src="https://pegasuswang.readthedocs.io/zh/latest/code/%E7%BC%96%E5%86%99%E5%8F%AF%E8%AF%BB%E4%BB%A3%E7%A0%81%E7%9A%84%E8%89%BA%E6%9C%AF/" alt=""></p><p><img src="https://pdai.tech/md/about/book/book-read-code-art.html#%E3%80%8A%E7%BC%96%E5%86%99%E5%8F%AF%E8%AF%BB%E4%BB%A3%E7%A0%81%E7%9A%84%E8%89%BA%E6%9C%AF%E3%80%8B" alt=""></p>',38),l=[p];function d(i,c,s,n,h,_){return t(),a("div",null,l)}const b=e(r,[["render",d]]);export{g as __pageData,b as default};
