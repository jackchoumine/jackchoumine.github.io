import{_ as e,o as a,c as l,a as o}from"./app.f440c936.js";const _=JSON.parse('{"title":"ol 之多源数据展示","description":"","frontmatter":{},"headers":[{"level":2,"title":"加载数据的原理","slug":"加载数据的原理","link":"#加载数据的原理","children":[{"level":3,"title":"矢量地图","slug":"矢量地图","link":"#矢量地图","children":[]},{"level":3,"title":"瓦片地图","slug":"瓦片地图","link":"#瓦片地图","children":[]},{"level":3,"title":"两者的区别","slug":"两者的区别","link":"#两者的区别","children":[]}]},{"level":2,"title":"ol 加载数据的方式","slug":"ol-加载数据的方式","link":"#ol-加载数据的方式","children":[]},{"level":2,"title":"开放数据格式","slug":"开放数据格式","link":"#开放数据格式","children":[{"level":3,"title":"加载 GeoJSON 数据","slug":"加载-geojson-数据","link":"#加载-geojson-数据","children":[]},{"level":3,"title":"加载 KML 数据","slug":"加载-kml-数据","link":"#加载-kml-数据","children":[]},{"level":3,"title":"加载 GPX 数据","slug":"加载-gpx-数据","link":"#加载-gpx-数据","children":[]}]},{"level":2,"title":"公共地图数据","slug":"公共地图数据","link":"#公共地图数据","children":[{"level":3,"title":"加载 OpenStreetMap 数据","slug":"加载-openstreetmap-数据","link":"#加载-openstreetmap-数据","children":[]}]},{"level":2,"title":"矢量瓦片","slug":"矢量瓦片","link":"#矢量瓦片","children":[]}],"relativePath":"web-gis/ol-data-source.md"}'),r={name:"web-gis/ol-data-source.md"},t=o('<h1 id="ol-之多源数据展示" tabindex="-1">ol 之多源数据展示 <a class="header-anchor" href="#ol-之多源数据展示" aria-hidden="true">#</a></h1><p>随着 web 技术持续推进，地图展示的数据来源越来越丰富，格式众多，如何将<strong>多源异构数据</strong>展示在地图上，成为 webGIS 的关键。</p><p>ol 为多源异构数据的展示提供了很好的支持。</p><h2 id="加载数据的原理" tabindex="-1">加载数据的原理 <a class="header-anchor" href="#加载数据的原理" aria-hidden="true">#</a></h2><p>地图形式：矢量地图和瓦片地图。</p><h3 id="矢量地图" tabindex="-1">矢量地图 <a class="header-anchor" href="#矢量地图" aria-hidden="true">#</a></h3><p>两种方式加载矢量地图</p><ol><li><p>从远程服务加载矢量数据；</p></li><li><p>从本地读取矢量数据，比如 GML、KML、GeoJSON 等文件。</p></li></ol><p>加载原理：通过 ajax 请求地图服务或者读取本地数据，在浏览器<strong>实时生成</strong>矢量图层。</p><h3 id="瓦片地图" tabindex="-1">瓦片地图 <a class="header-anchor" href="#瓦片地图" aria-hidden="true">#</a></h3><p>将图层分成类似瓦片的图片，从服务器或者本地目录加载这些图片，在浏览器里组合成图层。</p><p>浏览器加载瓦片地图也有两种方式：</p><ol><li><p>调用瓦片图片接口，从远程加载；</p></li><li><p>从本地读取瓦片图片。</p></li></ol><p>加载原理：通过 ajax 请求地图服务或者读取本地数据，根据瓦片的<strong>放缩级别</strong>、<strong>行列号</strong>分别获取瓦片，按照请求的<strong>空间范围</strong>组织好（即按照网格组织瓦片地图），从而形成一幅地图并显示在网页上。</p><h3 id="两者的区别" tabindex="-1">两者的区别 <a class="header-anchor" href="#两者的区别" aria-hidden="true">#</a></h3><p>主要区别试预处理机制不同。</p><p>瓦片地图通过剪切处理，已经形成缓存图片集，加载时比实时生成图片快。出图较快，满足网络环境不够好和地图变更少的情况。</p><p>矢量地图加载时需要实时生成图片，加载时比瓦片地图慢。满足实时数据处理、分析要求，适用范围广。</p><h2 id="ol-加载数据的方式" tabindex="-1">ol 加载数据的方式 <a class="header-anchor" href="#ol-加载数据的方式" aria-hidden="true">#</a></h2><p>ol 将<strong>图层</strong>和<strong>数据源</strong>分离，图层作为渲染地图数据的容器，而数据作为 GIS 信息的载体，数据源是数据的提供者，图层要与数据源匹配。</p><p>图层和数据源均分为三种：Image、Tile、Vector，在实例化图层对象时，其数据源类型要与图层类型匹配。</p><ol><li>瓦片地图</li></ol><p>使用<code>ol/layer.Tile</code> + <code>ol/source.Tile</code> 方式加载。</p><p><code>ol/layer.Tile</code> 为封装各种瓦片地图数据源提供扩展支持。</p><p>瓦片地图也可以使用<code>ol/layer.Image</code> + <code>ol/source.Image</code> 方式加载。</p><ol start="2"><li>矢量地图</li></ol><p>使用<code>ol/layer.vector</code> + <code>ol/source.Vector</code> 方式加载。</p><p>矢量地图数据源有两种方式：</p><p>features 加载：设置 features 参数静态加载矢量地图，或者 addFeature 或 addFeatures 加载动态矢量地图。</p><p>url + format 加载：设置 url 和 format 参数，通过 ajax 请求数据源加载矢量地图。</p><h2 id="开放数据格式" tabindex="-1">开放数据格式 <a class="header-anchor" href="#开放数据格式" aria-hidden="true">#</a></h2><p>为了更好的共享和聚合地图的目的，让 GIS 数据使用更加灵活、应用范围更加广泛，制定一些通用的数据格式，如 GeoJSON、KML、GML 等。</p><ol><li>KML</li></ol><p>KML 是一种基于 XML 的数据格式，用于描述和标注地理信息，由 Keyhole （Google Earth 的前身） 开发，支持从类似谷歌地球、微软虚拟地球、ol 等地图平台导入导出数据。</p><p>被 OGC 采用，标准由 OGC 维护。</p><ol start="2"><li>GML</li></ol><p>GML(Geography Markup Language) 由 OGC 提出，能表示地理空间对象的空间数据和非空间数据。</p><ol start="3"><li>GPX</li></ol><p>GPX(GPS eXchange Format) 是一种 XML 格式，用于描述 GPS 路径、轨迹、航迹等信息。</p><ol start="4"><li>GeoJSON</li></ol><p>GeoJSON 是一种基于 JSON 的数据格式，用于描述地理信息。</p><p>可表示几何特征和特征集合，支持点、线、面、多点、多线、多面、几何集合等几何类型。</p><p>GeoJSON 包含一个几个对象及其属性，特征集合表示一系列特征。</p><p>ol 提供了解析这些数据格式的类，对应<code>Format</code>的子类。</p><h3 id="加载-geojson-数据" tabindex="-1">加载 GeoJSON 数据 <a class="header-anchor" href="#加载-geojson-数据" aria-hidden="true">#</a></h3><h3 id="加载-kml-数据" tabindex="-1">加载 KML 数据 <a class="header-anchor" href="#加载-kml-数据" aria-hidden="true">#</a></h3><h3 id="加载-gpx-数据" tabindex="-1">加载 GPX 数据 <a class="header-anchor" href="#加载-gpx-数据" aria-hidden="true">#</a></h3><h2 id="公共地图数据" tabindex="-1">公共地图数据 <a class="header-anchor" href="#公共地图数据" aria-hidden="true">#</a></h2><p>一些地图服务商，如谷歌地图、高德地图、百度地图、OpenStreetMap、天地图等，提供了大量地图服务资源，可免费使用，一般以瓦片地图的形式提供，作为底图。</p><p>ol 提供了对这些地图服务的支持，可直接使用 ol 的 API 使用这些服务，比如 OpenStreetMap、Bing 地图，可直接使用它们实例化数据源，结合瓦片图层来加载对应的地图数据。</p><p>ol 没有提供特别支持的服务商，比如百度地图、天地图等，可通过 ol 的<code>ol/source.XYZ</code>类实现。</p><h3 id="加载-openstreetmap-数据" tabindex="-1">加载 OpenStreetMap 数据 <a class="header-anchor" href="#加载-openstreetmap-数据" aria-hidden="true">#</a></h3><h2 id="矢量瓦片" tabindex="-1">矢量瓦片 <a class="header-anchor" href="#矢量瓦片" aria-hidden="true">#</a></h2>',53),i=[t];function d(n,p,h,s,c,g){return a(),l("div",null,i)}const G=e(r,[["render",d]]);export{_ as __pageData,G as default};
