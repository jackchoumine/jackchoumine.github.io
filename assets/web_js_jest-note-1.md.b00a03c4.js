import{_ as e,o as t,c as l,a}from"./app.c54fd8bc.js";const _=JSON.parse('{"title":"jest 测试笔记（一） --- 前端测试的难点和好处","description":"","frontmatter":{},"headers":[{"level":2,"title":"测试难点","slug":"测试难点","link":"#测试难点","children":[]},{"level":2,"title":"测试的好处","slug":"测试的好处","link":"#测试的好处","children":[]},{"level":2,"title":"前端需要哪些测试","slug":"前端需要哪些测试","link":"#前端需要哪些测试","children":[]},{"level":2,"title":"有哪些测试框架","slug":"有哪些测试框架","link":"#有哪些测试框架","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"relativePath":"web/js/jest-note-1.md"}'),r={name:"web/js/jest-note-1.md"},o=a('<h1 id="jest-测试笔记-一-前端测试的难点和好处" tabindex="-1">jest 测试笔记（一） --- 前端测试的难点和好处 <a class="header-anchor" href="#jest-测试笔记-一-前端测试的难点和好处" aria-hidden="true">#</a></h1><p>测试可让我们对代码更加有信心，测试能保证重构顺利进行等。web 页面自动化测试，一直是行业难点，大家都是手动测试。</p><p>随着 node、组件化开发和工程手段在前端的应用，事情开始变好，web 页面的自动化测试越来越容易了。</p><h2 id="测试难点" tabindex="-1">测试难点 <a class="header-anchor" href="#测试难点" aria-hidden="true">#</a></h2><ol><li>环境配置困难</li></ol><p>这是当前前端工程化的通病，不仅仅是测试，还有构建、部署等等，都需要配置环境，而且不同的项目，环境配置都不一样，这就导致了学习成本很高。</p><blockquote><p>环境的配置，往往会劝退很多新手。</p></blockquote><ol start="2"><li>不知道如何 mock</li></ol><p>比如模拟 http 调用，模拟依赖，模拟定时器等等。</p><ol start="3"><li>不会构造测试用例</li></ol><p>适当测试用例可以覆盖到所有的代码，但是测试用例的编写是一个技术活，需要一定的经验。</p><ol start="4"><li>没有测试策略</li></ol><p>适当的测试策略可节省大量的测试用例编写时间，但是测试策略的制定也是一个技术活，需要一定的经验。</p><p>没有适当的测试策略，会觉得测试很浪费时间，干脆不测试。</p><ol start="5"><li>对业务理解不够深入</li></ol><p>对业务理解不够深入，就会导致测试用例编写不够全面，覆盖不到所有的代码。</p><ol start="6"><li>专门讨论前端测试的资料很少</li></ol><p>前端开发还处在一个不断发展的阶段，工程化的手段这些年一直在补课，前端测试作为工程化的一部分，也是如此，很多东西都是在摸索中，所以专门讨论前端测试的资料很少。</p><h2 id="测试的好处" tabindex="-1">测试的好处 <a class="header-anchor" href="#测试的好处" aria-hidden="true">#</a></h2><p>测试有诸多好处，保证代码质量只是其中一个方面。</p><ol><li>优化流程</li></ol><p>功能开发完毕后，后续的流程都可能发现 bug，而 bug 越是后面发现，修复的成本越高，可能是写这段代码的人离职，后来的人不知道这段代码的作用，也不敢随便改动，甚至写这个代码的人也不认识这段代码了，所以测试可以尽早发现 bug，减少后续流程的成本。</p><ol start="2"><li>保证代码质量</li></ol><blockquote><p>大多数的&quot;软件缺陷&quot;并非源自编程错误，对众多从小到大的项目进行的研究而得出的结论往往是一致的：导致软件缺陷的最大原因是产品说明书。——《软件测试》</p></blockquote><p>产品说明书是指需求文档、设计文档等等，这些文档的质量直接影响到代码的质量，而测试可以发现这些文档的问题，保证代码质量。</p><p>很多产品经理，只会给出他希望的功能，而不会给出可能的边界情况，开发拿到需求后，很可能也是考虑不周的。</p><p>而编写测试，会开发者考虑到更多的边界情况，保证代码质量。</p><ol start="3"><li>保证重构质量</li></ol><p>重构是保证代码质量的重要手段，但是重构的过程中，很可能会引入新的 bug，而测试可以保证重构的质量。</p><p>没有测试的保证，大家都不敢优化，不敢动代码，能不动就不动，能跑就行。</p><ol start="4"><li>用例即文档</li></ol><p>测试用例是对代码的使用方式的描述，而且是最直观的描述，所以测试用例是最好的文档。</p><ol start="5"><li>促使开发者编写可测试的代码</li></ol><p>软件测试是一个和开发不同的领域，学习测试可以提升自己的能力：迫使自己编写可测试的代码。</p><p>先写测试代码，再实现具体的而功能让测试代码通过，可实现编写最小功能代码的目的。TDD(测试驱动开发)能促使开发者编写最少最干净的代码，让代码具有良好的设计。</p><h2 id="前端需要哪些测试" tabindex="-1">前端需要哪些测试 <a class="header-anchor" href="#前端需要哪些测试" aria-hidden="true">#</a></h2><blockquote><p>白盒测试</p></blockquote><p>测试代码逻辑和结构，内部实现，往往试开发人员编写。白盒测试往往比较脆弱，因为它和实现耦合，实现改变，测试用例很可能就失败了。</p><blockquote><p>黑盒测试</p></blockquote><p>功能测试，测试功能是否符合预期，不关注内部代码结构。</p><blockquote><p>单元测试（unit test）</p></blockquote><p>测试单一的功能：一个函数、一个接口，是最基础的测试。往往属于白盒测试。</p><blockquote><p>集成测试(integration test)</p></blockquote><p>前端程序需要正常工作，可能需要集成其他模块，比如生产环境中依赖其他资源，需要集成测试。</p><p>这种测试配置复杂，生产环境也不好模块，实践中很少做这种测试。</p><blockquote><p>端到端测试(E2E test)</p></blockquote><p>从头到尾验证程序是否正常运行，比如验证后台接口、用户的使用流程等，耗时，性价比不高，实践中往往是测试人员手动测试代替。</p><h2 id="有哪些测试框架" tabindex="-1">有哪些测试框架 <a class="header-anchor" href="#有哪些测试框架" aria-hidden="true">#</a></h2><p><a href="https://jestjs.io/zh-Hans/" target="_blank" rel="noreferrer">jest</a>、<a href="https://vitest.dev/" target="_blank" rel="noreferrer">vitest</a>、<a href="https://mochajs.org/" target="_blank" rel="noreferrer">Mocha</a>等。</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-hidden="true">#</a></h2><p><a href="https://gabrieltanner.org/blog/testing-introduction" target="_blank" rel="noreferrer">An Introduction to testing in Javascript</a></p><p><a href="https://github.yanhaixiang.com/jest-tutorial/#%E6%B5%8B%E8%AF%95%E9%9A%BE%E7%82%B9" target="_blank" rel="noreferrer">jest实战指南--测试难点</a></p><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-hidden="true">#</a></h2><ol><li>前端自动化测试还不够普及</li><li>前端自动化测试的好处很多</li><li>介绍了前端测试的类型</li><li>介绍了前端测试的框架</li></ol>',54),i=[o];function p(n,s,h,c,d,u){return t(),l("div",null,i)}const k=e(r,[["render",p]]);export{_ as __pageData,k as default};
