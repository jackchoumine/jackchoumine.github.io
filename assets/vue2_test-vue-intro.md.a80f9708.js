import{_ as s,o as n,c as a,a as l}from"./app.6b70ab2b.js";const d=JSON.parse('{"title":"vue 应用测试","description":"","frontmatter":{},"headers":[{"level":2,"title":"前端测试简介","slug":"前端测试简介","link":"#前端测试简介","children":[]},{"level":2,"title":"组件测试","slug":"组件测试","link":"#组件测试","children":[]},{"level":2,"title":"第一个测试","slug":"第一个测试","link":"#第一个测试","children":[{"level":3,"title":"避免误报","slug":"避免误报","link":"#避免误报","children":[]},{"level":3,"title":"如何组织测试代码","slug":"如何组织测试代码","link":"#如何组织测试代码","children":[]},{"level":3,"title":"挂载组件","slug":"挂载组件","link":"#挂载组件","children":[]},{"level":3,"title":"vue-test-utils","slug":"vue-test-utils","link":"#vue-test-utils","children":[]}]},{"level":2,"title":"如何调试测试用例","slug":"如何调试测试用例","link":"#如何调试测试用例","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"relativePath":"vue2/test-vue-intro.md"}'),e={name:"vue2/test-vue-intro.md"},p=l(`<h1 id="vue-应用测试" tabindex="-1">vue 应用测试 <a class="header-anchor" href="#vue-应用测试" aria-hidden="true">#</a></h1><nav class="table-of-contents"><ul><li><a href="#vue-应用测试">vue 应用测试</a><ul><li><a href="#前端测试简介">前端测试简介</a></li><li><a href="#组件测试">组件测试</a></li><li><a href="#第一个测试">第一个测试</a><ul><li><a href="#避免误报">避免误报</a></li><li><a href="#如何组织测试代码">如何组织测试代码</a></li><li><a href="#挂载组件">挂载组件</a></li><li><a href="#vue-test-utils">vue-test-utils</a></li></ul></li><li><a href="#如何调试测试用例">如何调试测试用例</a></li><li><a href="#参考">参考</a></li></ul></li></ul></nav><h2 id="前端测试简介" tabindex="-1">前端测试简介 <a class="header-anchor" href="#前端测试简介" aria-hidden="true">#</a></h2><p>软件测试：检查软件是否按照预期工作的过程。</p><p>测试分类：</p><p>从是否需要手动测试来分：</p><ul><li>手动测试：需要人工操作，比如点击按钮，输入文字等。</li><li>自动测试：写代码测试其他代码，不需要人亲自手动测试每一个功能。</li></ul><p>前端测试，从测试的范围来分：</p><ol><li>端到端测试</li></ol><p>测试整个应用，从用户角度出发，<strong>浏览器自动</strong>测试整个应用是否按照预期工作。是自动执行的手动测试，加快手动测试的速度。</p><ul><li>优点：测试全面，测试结果可靠。</li><li>缺点：① 测试速度慢 ② 调试困难 ③ 可能成为 flakey 测试 ④ 编写测试代码的成本高。</li></ul><blockquote><p>flakey 测试：即使程序没有问题，测试也会失败。</p></blockquote><ol start="2"><li>单元测试</li></ol><p>对应用的小部分进行的测试。比如测试一个函数，一个组件等。</p><ul><li>优点：① 测试速度快 ② 调试方便 ③ 编写测试代码的成本低 ④ 提供文档功能，可通过测试用例了解代码的行为 ⑤ 稳定，有助于重构。</li><li>缺点：测试范围小，测试结果不可靠。</li></ul><blockquote><p>重构：不改变代码的功能，但是改变代码的结构，目的是为了提高代码质量。</p></blockquote><ol start="3"><li>快照测试</li></ol><p>快照测试会给运行中的应用程序拍一张图片，并将其与以前保存的图片进行比较。如果图像不同，则测试失败。这种测试方法对确保应用程序代码变更后是否仍然可以正确渲染很有帮助。</p><p>各种测试在前端测试中的占比</p><p><img src="https://jsd.cdn.zzko.cn/gh/jackchoumine/jack-picture@master/front-end-test.png" alt=""></p><blockquote><p>为何没有集成测试？</p></blockquote><p>前端的集成测试，难以定义、编写和调试，通常认为端到端测试就是集成测试。</p><blockquote><p>什么时候不需要自动化测试？</p></blockquote><p>自动化测试的目的是为了节省时间和精力，<strong>长期开发</strong>的<strong>规模较大</strong>的项目自动化测试才会带来巨大的收益。如果项目只是一个小项目，或者是一个短期项目，那么自动化测试可能会带来负担，即编写测试代码会比直接编写应用代码更花时间。</p><p>实际上，在我的工作中，前端进行自动化测试的团队都很少，大部分都是手动测试。</p><blockquote><p>不必追求 100% 的测试覆盖率</p></blockquote><p>除非一个 bug 导致了严重的后果，比如损失几百万元，否则不必追求 100% 的测试覆盖率。因为测试代码也是需要维护的，测试代码的维护成本也是需要考虑的。</p><h2 id="组件测试" tabindex="-1">组件测试 <a class="header-anchor" href="#组件测试" aria-hidden="true">#</a></h2><p>组件有很多属性，决定测试哪些属性很重要，能帮助编写高效的测试代码。</p><blockquote><p>如何决定测试哪些属性？</p></blockquote><p><strong>组件的输入和输出</strong>（有人叫组件契约或者组件接口）可帮助决定测试哪些属性。</p><p>从开发人员使用组件但又不了解组件具体实现的角度来编写测试，好的组件单元测试应该始终可触发一个输入，并断言一个输出。</p><p>常见的组件输入：</p><ol><li>用户操作，比如点击按钮，输入文字等；</li><li>props；</li><li>组件事件；</li><li>vuex store 中的数据。</li></ol><p>常见的输出：</p><ol><li>触发的事件；</li><li>外部调用的方法，即公有方法；</li><li>渲染结果。</li></ol><h2 id="第一个测试" tabindex="-1">第一个测试 <a class="header-anchor" href="#第一个测试" aria-hidden="true">#</a></h2><p>已经存在一个使用 <code>vue-cli</code> 创建的项目，希望添加测试。</p><ol><li>安装 vue 测试插件：</li></ol><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">vue</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">@vue/cli-plugin-unit-jest</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="2"><li>编写 HelloWorld.vue 组件：</li></ol><p>安装完毕会自动配置测试环境，并创建了一个测试 <code>HelloWorld.vue</code> 的用例，但是项目里没有 HelloWorld.vue，在 <code>tests/unit</code> 就近新建一个。</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">HelloWorld</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">props</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">msg</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> String</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">default</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">{{ msg }}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>然后引入组件：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> HelloWorld </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./HelloWorld.vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="3"><li>运行测试</li></ol><p>执行 <code>npm run test:unit</code> ，测试环境是否配置成功。</p><blockquote><p>可用性（sanity）测试</p></blockquote><p>搭建测试系统的第一步是编写一个简单的测试来检查系统是否配置正确。这被称为<strong>可用性（sanity）测试</strong>。</p><p>在排查复杂问题或者配置环境时，可用性测试应该成为第一个测试用例，因为它能检查环境是否配置正确。</p><blockquote><p>就近放置测试文件</p></blockquote><p>将单元测试放置在尽可能接近被测代码的位置，会更容易被其他开发人员找到。</p><h3 id="避免误报" tabindex="-1">避免误报 <a class="header-anchor" href="#避免误报" aria-hidden="true">#</a></h3><p>误报：测试始终通过，但是实际上程序有 bug。</p><blockquote><p>测试通过，是因为源代码按照预期工作，而不是编写始终通过测试的测试代码。</p></blockquote><p>异步代码经常出现误报，因为测试代码没有等待异步代码执行完毕，就开始断言。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">始终通过的测试</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// TODO 如何编写 runner</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// runner.start()</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// setTimeout(() =&gt; {</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//   expect(runner.finished).toBe(true)</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// }, 1000)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="如何组织测试代码" tabindex="-1">如何组织测试代码 <a class="header-anchor" href="#如何组织测试代码" aria-hidden="true">#</a></h3><p><code>describe</code> 函数用于组织测试代码，describe 用于定义一组测试用例，每个测试用例都是一个 <code>test</code> 函数。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#82AAFF;">describe</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">HelloWorld.vue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">it</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">renders props.msg when passed</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">msg</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">new message</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">wrapper</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">shallowMount</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">HelloWorld</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      propsData</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">msg</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">expect</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">wrapper</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">text</span><span style="color:#F07178;">())</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toMatch</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">msg</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">test</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">始终通过的测试</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// TODO 如何编写 runner</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// runner.start()</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// setTimeout(() =&gt; {</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//   expect(runner.finished).toBe(true)</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// }, 1000)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>当运行测试时，会在控制台<strong>格式化输出</strong> describe 和 test 的一个参数，方便查看测试结果。</p><p>一个文件可写多个 describe，describe 可嵌套，</p><blockquote><p>推荐的做法是一个文件只写一个 describe，describe 不嵌套。</p></blockquote><p>否则会降低测试代码的可读性和新加的测试用例的不知道放在哪个 describe 里面。</p><blockquote><p>测试代码和源代码挨近，方便他人查看。</p></blockquote><h3 id="挂载组件" tabindex="-1">挂载组件 <a class="header-anchor" href="#挂载组件" aria-hidden="true">#</a></h3><p>vue 单文件组件经过编译后，是一个<strong>有渲染函数的对象</strong>，要测试组组件是否正确，需要开启渲染过程，这个过程称为挂载。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Vue</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">render</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">h</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">h</span><span style="color:#A6ACCD;">(App)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">$mount</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#app</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>使用 <code>new</code> 新建一个 vue 实例，然后调用 <code>$mount</code> 方法，传入一个 DOM 元素，vue 会将组件渲染到这个 DOM 元素中。</p><p>希望挂载组件，就需要将<strong>组件对象</strong>转成构造函数，组件对象无法直接挂载。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> Ctor </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Vue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">extend</span><span style="color:#A6ACCD;">(HelloWorld) </span><span style="color:#676E95;font-style:italic;">// 使用 Vue.extend 将组件对象转成构造函数</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> vm </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Ctor</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">propsData</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    msg</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">$mount</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// 挂载组件</span></span>
<span class="line"><span style="color:#82AAFF;">expect</span><span style="color:#A6ACCD;">(vm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">$el</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">textContent)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toMatch</span><span style="color:#A6ACCD;">(msg)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><blockquote><p>jest 在 jsdom 环境中运行，jsdom 是一个模拟浏览器环境的库，它提供了一些浏览器环境的全局变量，比如 window、document 等。 所以能直接挂载组件。</p></blockquote><p>jsdom 实现了<strong>大多数 DOM API</strong>，它完全是由运行在 DOM 中的 JavaScript 编写。使用 jsdom 替代真正的浏览器可以使测试运行变得更快。</p><h3 id="vue-test-utils" tabindex="-1">vue-test-utils <a class="header-anchor" href="#vue-test-utils" aria-hidden="true">#</a></h3><p>手动挂载组件，代码量较多，<a href="https://v1.test-utils.vuejs.org/zh/" target="_blank" rel="noreferrer">vue-test-utils</a> 提供了一些 API，方便测试 vue 组件。</p><p>mount 方法，该方法在接收一个组件后，会将其挂载并返回一个包含被挂载组件实例（vm）的<strong>包装器对象</strong>。</p><blockquote><p>知道为什么 mount 不直返回 Vue 实例（vm）而是返回包装器?</p></blockquote><p>mount 返回的包装器不仅包含 Vue 实例，还包括一些辅助方法，你可以使用它们来<strong>设置 props</strong>，<strong>检查实例属性</strong>以及<strong>操作实例</strong>。</p><p>常用的包装器方法：</p><ol><li>text 方法：返回包装器的文本内容。</li><li>html 方法：返回包装器的 HTML 内容。</li><li>find 方法：返回包含指定选择器的第一个 DOM 元素的包装器。</li><li>findAll 方法：返回包含指定选择器的所有 DOM 元素的包装器。</li><li>setData 方法：设置组件的 data 属性。</li><li>setProps 方法：设置组件的 props 属性。</li><li>trigger 方法：触发指定的事件。</li><li>vm 属性：返回包装器的 Vue 实例。</li></ol><p>shallowMount 方法，该方法与 mount 方法类似，但是它不会渲染组件的子组件。</p><h2 id="如何调试测试用例" tabindex="-1">如何调试测试用例 <a class="header-anchor" href="#如何调试测试用例" aria-hidden="true">#</a></h2><ol><li>使用 vscode 扩展</li></ol><p><code>Jest Runner</code> 可以在 vscode 中运行测试用例，方便调试。</p><blockquote><p>推荐使用</p></blockquote><ol start="2"><li>在 chrome 浏览器调试</li></ol><p>开启 jest 调试模式，新加一个脚本：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">&quot;test:debug&quot;</span><span style="color:#82AAFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">node --inspect-brk node_modules/.bin/vue-cli-service test:unit</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">,</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="3"><li>在 vscode 中调试</li></ol><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-hidden="true">#</a></h2><p><a href="https://www.aligoogle.net/pages/343eae/#%E4%B8%80-%E4%BE%9D%E8%B5%96%E8%AF%B4%E6%98%8E" target="_blank" rel="noreferrer">Jest 单元测试环境搭建</a></p><p><a href="https://blog.octo.com/vue-js-unit-test-cases-with-vue-test-utils-and-jest/" target="_blank" rel="noreferrer">Vue.js unit test cases with vue-test-utils and Jest</a></p><p><a href="https://mayashavin.com/articles/testing-components-with-vitest" target="_blank" rel="noreferrer"></a></p><p><a href="https://blog.logrocket.com/guide-vitest-automated-testing-vue-components/" target="_blank" rel="noreferrer"></a></p><p><a href="https://vueschool.io/lessons/learn-how-to-test-vuejs-lifecycle-methods" target="_blank" rel="noreferrer"></a></p><p><a href="https://blog.canopas.com/vue-3-component-testing-with-jest-8b80a8a8946b" target="_blank" rel="noreferrer"></a></p><p><a href="https://testdriven.io/blog/vue-unit-testing/" target="_blank" rel="noreferrer">Guide to Unit Testing Vue Components</a></p><p><a href="https://fjolt.com/category/vue" target="_blank" rel="noreferrer">All Vue Content</a></p>`,98),o=[p];function t(r,c,i,y,D,F){return n(),a("div",null,o)}const b=s(e,[["render",t]]);export{d as __pageData,b as default};
